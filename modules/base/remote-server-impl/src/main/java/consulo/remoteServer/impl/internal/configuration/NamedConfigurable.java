/*
 * Copyright 2000-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package consulo.remoteServer.impl.internal.configuration;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import consulo.annotation.DeprecationInfo;
import consulo.application.CommonBundle;
import consulo.configurable.Configurable;
import consulo.configurable.MasterDetailsConfigurable;
import consulo.disposer.Disposable;
import consulo.logging.Logger;
import consulo.ui.annotation.RequiredUIAccess;
import consulo.ui.ex.awt.JBUI;
import consulo.ui.ex.awt.event.DocumentAdapter;
import consulo.ui.image.Image;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import java.awt.*;

/**
 * User: anna
 * Date: 26-May-2006
 */
@Deprecated
@DeprecationInfo("AWT copy - for fix dependency issues - use new UI API")
public abstract class NamedConfigurable<T> implements Configurable, MasterDetailsConfigurable<T> {
    private JTextField myNameField;
    private JPanel myNamePanel;
    private JPanel myWholePanel;
    private JPanel myOptionsPanel;
    private JPanel myTopRightPanel;
    private JComponent myOptionsComponent;
    private boolean myNameEditable;

    protected NamedConfigurable() {
        this(false, null);
    }

    protected NamedConfigurable(boolean isNameEditable, @Nullable final Runnable updateTree) {
        myNameEditable = isNameEditable;
        myNamePanel.setVisible(myNameEditable);
        if (myNameEditable) {
            myNameField.getDocument().addDocumentListener(new DocumentAdapter() {
                @Override
                protected void textChanged(DocumentEvent e) {
                    setDisplayName(myNameField.getText());
                    if (updateTree != null) {
                        updateTree.run();
                    }
                }
            });
        }
        myNamePanel.setBorder(JBUI.Borders.empty(10, 10, 6, 10));
    }

    public boolean isNameEditable() {
        return myNameEditable;
    }

    public void setNameFieldShown(boolean shown) {
        if (myNamePanel.isVisible() == shown) {
            return;
        }

        myNamePanel.setVisible(shown);
        myWholePanel.revalidate();
        myWholePanel.repaint();
    }

    public abstract void setDisplayName(String name);

    public abstract T getEditableObject();

    public abstract String getBannerSlogan();

    @RequiredUIAccess
    @Override
    public final JComponent createComponent(@Nonnull Disposable parentDisposable) {
        if (myOptionsComponent == null) {
            myOptionsComponent = createOptionsPanel(parentDisposable);
            final JComponent component = createTopRightComponent(myNameField);
            if (component == null) {
                myTopRightPanel.setVisible(false);
            }
            else {
                myTopRightPanel.add(component, BorderLayout.CENTER);
            }
        }
        if (myOptionsComponent != null) {
            myOptionsPanel.add(myOptionsComponent, BorderLayout.CENTER);
        }
        else {
            Logger.getInstance(getClass()).error("Options component is null for " + getClass());
        }
        updateName();
        return myWholePanel;
    }

    @Nullable
    protected JComponent createTopRightComponent(JTextField nameField) {
        return null;
    }

    protected void resetOptionsPanel() {
        myOptionsComponent = null;
        myOptionsPanel.removeAll();
    }

    public void updateName() {
        myNameField.setText(getDisplayName());
    }

    @RequiredUIAccess
    @SuppressWarnings("deprecation")
    public JComponent createOptionsPanel(@Nonnull Disposable parentDisposable) {
        return createOptionsPanel();
    }

    @Deprecated
    public JComponent createOptionsPanel() {
        throw new AbstractMethodError();
    }

    @Nullable
    @Override
    public Image getIcon() {
        return getIcon(false);
    }

    @Nullable
    public Image getIcon(boolean expanded) {
        return null;
    }

    {
// GUI initializer generated by Consulo GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by Consulo GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myWholePanel = new JPanel();
        myWholePanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        myOptionsPanel = new JPanel();
        myOptionsPanel.setLayout(new BorderLayout(0, 0));
        myWholePanel.add(myOptionsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        myNamePanel = new JPanel();
        myNamePanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        myWholePanel.add(myNamePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, CommonBundle.message("name.label.text"));
        myNamePanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myNameField = new JTextField();
        myNamePanel.add(myNameField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        myTopRightPanel = new JPanel();
        myTopRightPanel.setLayout(new BorderLayout(0, 0));
        myNamePanel.add(myTopRightPanel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        label1.setLabelFor(myNameField);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) {
                    break;
                }
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myWholePanel;
    }
}

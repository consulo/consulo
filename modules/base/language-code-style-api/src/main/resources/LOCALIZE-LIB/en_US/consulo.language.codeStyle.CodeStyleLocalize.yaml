action.stop:
    text: Stop
arrangement.action.rule.add.description:
    text: Add new arrangement rule
arrangement.action.rule.add.text:
    text: Add rule
arrangement.action.rule.edit.description:
    text: Edit selected arrangement rule
arrangement.action.rule.edit.text:
    text: Edit rule
arrangement.action.rule.move.down.description:
    text: Move selected arrangement rule(s) down
arrangement.action.rule.move.down.text:
    text: Move down
arrangement.action.rule.move.up.description:
    text: Move selected arrangement rule(s) up
arrangement.action.rule.move.up.text:
    text: Move up
arrangement.action.rule.remove.description:
    text: Remove selected arrangement rule(s)
arrangement.action.rule.remove.text:
    text: Remove rule(s)
arrangement.order.name:
    text: Order
arrangement.settings.groups.dependent.methods:
    text: Keep dependent methods together
arrangement.settings.groups.getters.and.setters.together:
    text: Keep getters and setters together
arrangement.settings.groups.overridden.methods:
    text: Keep overridden methods together
arrangement.settings.groups.property.field:
    text: Group property field with corresponding getter/setter
arrangement.settings.order.type.breadth.first:
    text: breadth-first order
arrangement.settings.order.type.by.name:
    text: order by name
arrangement.settings.order.type.depth.first:
    text: depth-first order
arrangement.settings.order.type.keep:
    text: keep order
arrangement.settings.section.groups:
    text: Grouping rules
arrangement.settings.section.match:
    text: Matching rules
arrangement.settings.text.entry.type.xml.attribute:
    text: attribute
arrangement.settings.text.entry.type.xml.tag:
    text: tag
arrangement.settings.text.general.modifier:
    text: 'Modifier:'
arrangement.settings.text.general.name:
    text: 'Name:'
arrangement.settings.text.general.order:
    text: 'Order:'
arrangement.settings.text.general.text:
    text: 'Text:'
arrangement.settings.text.general.type:
    text: 'Type:'
arrangement.settings.text.general.xml.namespace:
    text: 'Namespace:'
arrangement.text.empty.rule:
    text: <empty rule>
arrangement.text.modifier:
    text: Modifier
arrangement.text.name:
    text: Name
arrangement.text.type:
    text: Type
arrangement.title.settings.tab:
    text: Arrangement
button.delete:
    text: Delete
button.save.as:
    text: Save As...
checkbox.align.multiline.array.initializer:
    text: Array initializer
checkbox.align.multiline.assignments:
    text: Assignments
checkbox.align.multiline.binary.operation:
    text: Binary operation
checkbox.align.multiline.call.arguments:
    text: Call arguments
checkbox.align.multiline.chained.methods:
    text: Chained methods
checkbox.align.multiline.extends.list:
    text: Extends list
checkbox.align.multiline.fields.groups:
    text: Field groups
checkbox.align.multiline.for.statement:
    text: For statement
checkbox.align.multiline.method.parameters:
    text: Method parameters
checkbox.align.multiline.parenthesized.expression:
    text: Parenthesized expression
checkbox.align.multiline.ternary.operation:
    text: Ternary operation
checkbox.align.multiline.throws.list:
    text: Throws list
checkbox.indent.use.tab.character:
    text: Use tab character
checkbox.keep.when.reformatting.control.statement.in.one.line:
    text: Control statement in one line
checkbox.spaces.additive.operators:
    text: Additive operators (+, -)
checkbox.spaces.after.colon:
    text: After ':'
checkbox.spaces.after.colon.in.label.declaration:
    text: After ':' in label declaration
checkbox.spaces.after.comma:
    text: After comma
checkbox.spaces.after.question:
    text: After '?'
checkbox.spaces.after.semicolon:
    text: After semicolon
checkbox.spaces.after.type.cast:
    text: After type cast
checkbox.spaces.annotation.array.initializer.left.brace:
    text: Annotation array initializer left brace
checkbox.spaces.annotation.parameters:
    text: Annotation parameters
checkbox.spaces.annotation.parentheses:
    text: Annotation parentheses
checkbox.spaces.around.unary.operator:
    text: Unary operators (!, -, +, ++, --)
checkbox.spaces.array.initializer.left.brace:
    text: Array initializer left brace
checkbox.spaces.assignment.operators:
    text: Assignment operators (=, +=, ...)
checkbox.spaces.before.colon:
    text: Before ':'
checkbox.spaces.before.comma:
    text: Before comma
checkbox.spaces.before.question:
    text: Before '?'
checkbox.spaces.before.semicolon:
    text: Before semicolon
checkbox.spaces.bitwise.operators:
    text: Bitwise operators (\&, |, ^)
checkbox.spaces.catch.keyword:
    text: '''catch'' keyword'
checkbox.spaces.catch.left.brace:
    text: '''catch'' left brace'
checkbox.spaces.catch.parentheses:
    text: '''catch'' parentheses'
checkbox.spaces.checkbox.spaces.empty.method.call.parentheses:
    text: Empty method call parentheses
checkbox.spaces.checkbox.spaces.empty.method.declaration.parentheses:
    text: Empty method declaration parentheses
checkbox.spaces.checkbox.spaces.method.call.parentheses:
    text: Method call parentheses
checkbox.spaces.checkbox.spaces.method.declaration.parentheses:
    text: Method declaration parentheses
checkbox.spaces.class.left.brace:
    text: Class left brace
checkbox.spaces.do.left.brace:
    text: '''do'' left brace'
checkbox.spaces.else.keyword:
    text: '''else'' keyword'
checkbox.spaces.else.left.brace:
    text: '''else'' left brace'
checkbox.spaces.equality.operators:
    text: Equality operators (==, !=)
checkbox.spaces.finally.keyword:
    text: '''finally'' keyword'
checkbox.spaces.finally.left.brace:
    text: '''finally'' left brace'
checkbox.spaces.for.left.brace:
    text: '''for'' left brace'
checkbox.spaces.for.parentheses:
    text: '''for'' parentheses'
checkbox.spaces.if.left.brace:
    text: '''if'' left brace'
checkbox.spaces.if.parentheses:
    text: '''if'' parentheses'
checkbox.spaces.logical.operators:
    text: Logical operators (\&\&, ||)
checkbox.spaces.method.call.parentheses:
    text: Method call parentheses
checkbox.spaces.method.declaration.parentheses:
    text: Method declaration parentheses
checkbox.spaces.method.left.brace:
    text: Method left brace
checkbox.spaces.multiplicative.operators:
    text: Multiplicative operators (*, /, %)
checkbox.spaces.relational.operators:
    text: Relational operators (<, >, <=, >=)
checkbox.spaces.shift.operators:
    text: Shift operators (<<, >>, >>>)
checkbox.spaces.switch.left.brace:
    text: '''switch'' left brace'
checkbox.spaces.switch.parentheses:
    text: '''switch'' parentheses'
checkbox.spaces.synchronized.left.brace:
    text: '''synchronized'' left brace'
checkbox.spaces.synchronized.parentheses:
    text: '''synchronized'' parentheses'
checkbox.spaces.try.left.brace:
    text: '''try'' left brace'
checkbox.spaces.try.parentheses:
    text: '''try'' parentheses'
checkbox.spaces.type.cast.parentheses:
    text: Type cast parentheses
checkbox.spaces.while.keyword:
    text: '''while'' keyword'
checkbox.spaces.while.left.brace:
    text: '''while'' left brace'
checkbox.spaces.while.parentheses:
    text: '''while'' parentheses'
checkbox.spaces.within.array.initializer.braces:
    text: Array initializer braces
checkbox.spaces.within.braces:
    text: Code braces
checkbox.spaces.within.brackets:
    text: Brackets
checkbox.spaces.within.parentheses:
    text: Grouping parentheses
combobox.force.braces.do.while:
    text: 'do ... while():'
combobox.force.braces.for:
    text: 'for ():'
combobox.force.braces.if:
    text: 'if ():'
combobox.force.braces.while:
    text: 'while ():'
editbox.indent.continuation.indent:
    text: 'Continuation indent:'
editbox.indent.indent:
    text: 'Indent:'
editbox.indent.tab.size:
    text: 'Tab size:'
editbox.scheme.name:
    text: 'Scheme:'
group.spaces.after.right.brace:
    text: Before Keywords
group.spaces.around.operators:
    text: Around Operators
group.spaces.before.left.brace:
    text: Before Left Brace
group.spaces.before.parentheses:
    text: Before Parentheses
group.spaces.in.ternary.operator:
    text: In Ternary Operator (?:)
group.spaces.in.type.arguments:
    text: Within Type Arguments
group.spaces.in.type.arguments.block:
    text: Type Arguments
group.spaces.in.type.parameters.block:
    text: Type Parameters
group.spaces.other:
    text: Other
group.spaces.within:
    text: Within
html.project.uses.own.code.style:
    text: <html><body>The current project is configured to use its own code style.<br>Changes made to global code style settings will not affect formatting in the current project.<br>See Project Settings | Code Style.<br>Press \&quot;Edit Global Settings\&quot; button below if you still want to edit global settings.</body></html>
indent.status.bar.indent.tooltip:
    text: 'Indent:'
indent.status.bar.spaces:
    text: '{0, choice, 1#{0} space|2#{0} spaces}'
indent.status.bar.tab:
    text: Tab
label.loading.page.please.wait:
    text: Loading...
title.blank.lines:
    text: Blank Lines
title.braces.placement:
    text: Braces Placement
title.edit.global.settings:
    text: Edit &Global Settings
title.global.code.style:
    text: |-
        Global
        Code Style
title.keep.blank.lines:
    text: Keep Maximum Blank Lines
title.minimum.blank.lines:
    text: Minimum Blank Lines
title.place.on.new.line:
    text: Place on New Line
title.save.code.style.scheme.as:
    text: Save Code Style Scheme As
title.settings:
    text: Settings
wrapping.after.modifier.list:
    text: Wrap after modifier list
wrapping.align.fields.in.columns:
    text: Align fields in columns
wrapping.align.in.columns:
    text: Align in columns
wrapping.align.parenthesised.when.multiline:
    text: Align parenthesised when multiline
wrapping.align.simple.methods.in.columns:
    text: Align simple methods in columns
wrapping.align.throws.keyword:
    text: Align 'throws' to method start
wrapping.align.variables.in.columns:
    text: Align variables in columns
wrapping.align.when.multiline:
    text: Align when multiline
wrapping.and.braces:
    text: Wrapping and Braces
wrapping.array.initializer:
    text: Array initializer
wrapping.assert.statement:
    text: Assert statement
wrapping.assignment.sign.on.next.line:
    text: Assignment sign on next line
wrapping.assignment.statement:
    text: Assignment statement
wrapping.assignment.variables.groups:
    text: Fields/variables groups
wrapping.binary.operations:
    text: Binary expressions
wrapping.brace.placement:
    text: Braces placement
wrapping.brace.placement.class.declaration:
    text: In class declaration
wrapping.brace.placement.end.of.line:
    text: End of line
wrapping.brace.placement.method.declaration:
    text: In method declaration
wrapping.brace.placement.next.line:
    text: Next line
wrapping.brace.placement.next.line.each.shifted:
    text: Next line, each shifted
wrapping.brace.placement.next.line.if.wrapped:
    text: Next line if wrapped
wrapping.brace.placement.next.line.shifted:
    text: Next line shifted
wrapping.brace.placement.other:
    text: Other
wrapping.catch.on.new.line:
    text: '''catch'' on new line'
wrapping.chained.method.call.first.on.new.line:
    text: Wrap first call
wrapping.chained.method.calls:
    text: Chained method calls
wrapping.chop.down.if.long:
    text: Chop down if long
wrapping.classes.annotation:
    text: Class annotations
wrapping.colon.signs.on.next.line:
    text: ''':'' signs on next line'
wrapping.comments:
    text: Comments
wrapping.comments.wrap.at.right.margin:
    text: Wrap at right margin
wrapping.do.not.wrap:
    text: Do not wrap
wrapping.dowhile.statement:
    text: '''do ... while()'' statement'
wrapping.else.on.new.line:
    text: '''else'' on new line'
wrapping.enum.constants:
    text: Enum constants
wrapping.extends.implements.keyword:
    text: Extends/implements keyword
wrapping.extends.implements.list:
    text: Extends/implements list
wrapping.fields.annotation:
    text: Field annotations
wrapping.finally.on.new.line:
    text: '''finally'' on new line'
wrapping.for.statement:
    text: '''for()'' statement'
wrapping.force.braces:
    text: Force braces
wrapping.force.braces.always:
    text: Always
wrapping.force.braces.do.not.force:
    text: Do not force
wrapping.force.braces.when.multiline:
    text: When multiline
wrapping.if.statement:
    text: '''if()'' statement'
wrapping.indent.case.from.switch:
    text: Indent 'case' branches
wrapping.keep.comment.at.first.column:
    text: Comment at first column
wrapping.keep.line.breaks:
    text: Line breaks
wrapping.keep.multiple.expressions.in.one.line:
    text: Multiple expressions in one line
wrapping.keep.simple.blocks.in.one.line:
    text: Simple blocks in one line
wrapping.keep.simple.classes.in.one.line:
    text: Simple classes in one line
wrapping.keep.simple.lambdas.in.one.line:
    text: Simple lambdas in one line
wrapping.keep.simple.methods.in.one.line:
    text: Simple methods in one line
wrapping.keep.when.reformatting:
    text: Keep when reformatting
wrapping.local.variables.annotation:
    text: Local variable annotations
wrapping.long.lines:
    text: Ensure right margin is not exceeded
wrapping.method.arguments:
    text: Method call arguments
wrapping.method.parameters:
    text: Method declaration parameters
wrapping.method.parentheses:
    text: Method parentheses
wrapping.methods.annotation:
    text: Method annotations
wrapping.modifier.list:
    text: Modifier list
wrapping.new.line.after.lbrace:
    text: New line after '{'
wrapping.new.line.after.lpar:
    text: New line after '('
wrapping.operation.sign.on.next.line:
    text: Operation sign on next line
wrapping.parameters.annotation:
    text: Parameter annotations
wrapping.quest.and.colon.signs.on.next.line:
    text: '''?'' and '':'' signs on next line'
wrapping.rbrace.on.new.line:
    text: Place '}' on new line
wrapping.rpar.on.new.line:
    text: Place ')' on new line
wrapping.special.else.if.braces.treatment:
    text: Special 'else if' treatment
wrapping.switch.statement:
    text: '''switch'' statement'
wrapping.take.priority.over.call.chain.wrapping:
    text: Take priority over call chain wrapping
wrapping.ternary.operation:
    text: Ternary operation
wrapping.throws.keyword:
    text: Throws keyword
wrapping.throws.list:
    text: Throws list
wrapping.try.resources:
    text: '''try-with-resources'''
wrapping.try.statement:
    text: '''try'' statement'
wrapping.while.on.new.line:
    text: '''while'' on new line'
wrapping.while.statement:
    text: '''while()'' statement'
wrapping.wrap.always:
    text: Wrap always
wrapping.wrap.if.long:
    text: Wrap if long
wrapping.wrap.on.typing:
    text: Wrap on typing
wrapping.wrap.on.typing.default:
    text: Default
wrapping.wrap.on.typing.no.wrap:
    text: 'No'
wrapping.wrap.on.typing.wrap:
    text: 'Yes'

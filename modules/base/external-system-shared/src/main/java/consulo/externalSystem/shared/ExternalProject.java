/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package consulo.externalSystem.shared;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ExternalProject implements org.apache.thrift.TBase<ExternalProject, ExternalProject._Fields>, java.io.Serializable, Cloneable, Comparable<ExternalProject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExternalProject");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("qname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHILD_PROJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("childProjects", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField SOURCE_STS_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceSts", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField PROJECT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("projectDir", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BUILD_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("buildDir", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BUILD_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("buildFile", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExternalProjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExternalProjectTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String qname; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String group; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,ExternalProject> childProjects; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,ExternalSourceSet> sourceSts; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String projectDir; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String buildDir; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String buildFile; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    QNAME((short)2, "qname"),
    DESCRIPTION((short)3, "description"),
    GROUP((short)4, "group"),
    VERSION((short)5, "version"),
    CHILD_PROJECTS((short)6, "childProjects"),
    SOURCE_STS((short)7, "sourceSts"),
    PROJECT_DIR((short)8, "projectDir"),
    BUILD_DIR((short)9, "buildDir"),
    BUILD_FILE((short)10, "buildFile"),
    PROPERTIES((short)11, "properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // QNAME
          return QNAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // GROUP
          return GROUP;
        case 5: // VERSION
          return VERSION;
        case 6: // CHILD_PROJECTS
          return CHILD_PROJECTS;
        case 7: // SOURCE_STS
          return SOURCE_STS;
        case 8: // PROJECT_DIR
          return PROJECT_DIR;
        case 9: // BUILD_DIR
          return BUILD_DIR;
        case 10: // BUILD_FILE
          return BUILD_FILE;
        case 11: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.QNAME,_Fields.DESCRIPTION,_Fields.GROUP,_Fields.VERSION,_Fields.CHILD_PROJECTS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QNAME, new org.apache.thrift.meta_data.FieldMetaData("qname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILD_PROJECTS, new org.apache.thrift.meta_data.FieldMetaData("childProjects", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExternalProject.class))));
    tmpMap.put(_Fields.SOURCE_STS, new org.apache.thrift.meta_data.FieldMetaData("sourceSts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExternalSourceSet.class))));
    tmpMap.put(_Fields.PROJECT_DIR, new org.apache.thrift.meta_data.FieldMetaData("projectDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUILD_DIR, new org.apache.thrift.meta_data.FieldMetaData("buildDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUILD_FILE, new org.apache.thrift.meta_data.FieldMetaData("buildFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExternalProject.class, metaDataMap);
  }

  public ExternalProject() {
  }

  public ExternalProject(
    java.lang.String name,
    java.util.Map<java.lang.String,ExternalSourceSet> sourceSts,
    java.lang.String projectDir,
    java.lang.String buildDir,
    java.lang.String buildFile,
    java.util.Map<java.lang.String,java.lang.String> properties)
  {
    this();
    this.name = name;
    this.sourceSts = sourceSts;
    this.projectDir = projectDir;
    this.buildDir = buildDir;
    this.buildFile = buildFile;
    this.properties = properties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExternalProject(ExternalProject other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetQname()) {
      this.qname = other.qname;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetChildProjects()) {
      java.util.Map<java.lang.String,ExternalProject> __this__childProjects = new java.util.HashMap<java.lang.String,ExternalProject>(other.childProjects.size());
      for (java.util.Map.Entry<java.lang.String, ExternalProject> other_element : other.childProjects.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        ExternalProject other_element_value = other_element.getValue();

        java.lang.String __this__childProjects_copy_key = other_element_key;

        ExternalProject __this__childProjects_copy_value = new ExternalProject(other_element_value);

        __this__childProjects.put(__this__childProjects_copy_key, __this__childProjects_copy_value);
      }
      this.childProjects = __this__childProjects;
    }
    if (other.isSetSourceSts()) {
      java.util.Map<java.lang.String,ExternalSourceSet> __this__sourceSts = new java.util.HashMap<java.lang.String,ExternalSourceSet>(other.sourceSts.size());
      for (java.util.Map.Entry<java.lang.String, ExternalSourceSet> other_element : other.sourceSts.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        ExternalSourceSet other_element_value = other_element.getValue();

        java.lang.String __this__sourceSts_copy_key = other_element_key;

        ExternalSourceSet __this__sourceSts_copy_value = new ExternalSourceSet(other_element_value);

        __this__sourceSts.put(__this__sourceSts_copy_key, __this__sourceSts_copy_value);
      }
      this.sourceSts = __this__sourceSts;
    }
    if (other.isSetProjectDir()) {
      this.projectDir = other.projectDir;
    }
    if (other.isSetBuildDir()) {
      this.buildDir = other.buildDir;
    }
    if (other.isSetBuildFile()) {
      this.buildFile = other.buildFile;
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
  }

  @Override
  public ExternalProject deepCopy() {
    return new ExternalProject(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.qname = null;
    this.description = null;
    this.group = null;
    this.version = null;
    this.childProjects = null;
    this.sourceSts = null;
    this.projectDir = null;
    this.buildDir = null;
    this.buildFile = null;
    this.properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public ExternalProject setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQname() {
    return this.qname;
  }

  public ExternalProject setQname(@org.apache.thrift.annotation.Nullable java.lang.String qname) {
    this.qname = qname;
    return this;
  }

  public void unsetQname() {
    this.qname = null;
  }

  /** Returns true if field qname is set (has been assigned a value) and false otherwise */
  public boolean isSetQname() {
    return this.qname != null;
  }

  public void setQnameIsSet(boolean value) {
    if (!value) {
      this.qname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public ExternalProject setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGroup() {
    return this.group;
  }

  public ExternalProject setGroup(@org.apache.thrift.annotation.Nullable java.lang.String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.version;
  }

  public ExternalProject setVersion(@org.apache.thrift.annotation.Nullable java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getChildProjectsSize() {
    return (this.childProjects == null) ? 0 : this.childProjects.size();
  }

  public void putToChildProjects(java.lang.String key, ExternalProject val) {
    if (this.childProjects == null) {
      this.childProjects = new java.util.HashMap<java.lang.String,ExternalProject>();
    }
    this.childProjects.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,ExternalProject> getChildProjects() {
    return this.childProjects;
  }

  public ExternalProject setChildProjects(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,ExternalProject> childProjects) {
    this.childProjects = childProjects;
    return this;
  }

  public void unsetChildProjects() {
    this.childProjects = null;
  }

  /** Returns true if field childProjects is set (has been assigned a value) and false otherwise */
  public boolean isSetChildProjects() {
    return this.childProjects != null;
  }

  public void setChildProjectsIsSet(boolean value) {
    if (!value) {
      this.childProjects = null;
    }
  }

  public int getSourceStsSize() {
    return (this.sourceSts == null) ? 0 : this.sourceSts.size();
  }

  public void putToSourceSts(java.lang.String key, ExternalSourceSet val) {
    if (this.sourceSts == null) {
      this.sourceSts = new java.util.HashMap<java.lang.String,ExternalSourceSet>();
    }
    this.sourceSts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,ExternalSourceSet> getSourceSts() {
    return this.sourceSts;
  }

  public ExternalProject setSourceSts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,ExternalSourceSet> sourceSts) {
    this.sourceSts = sourceSts;
    return this;
  }

  public void unsetSourceSts() {
    this.sourceSts = null;
  }

  /** Returns true if field sourceSts is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceSts() {
    return this.sourceSts != null;
  }

  public void setSourceStsIsSet(boolean value) {
    if (!value) {
      this.sourceSts = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProjectDir() {
    return this.projectDir;
  }

  public ExternalProject setProjectDir(@org.apache.thrift.annotation.Nullable java.lang.String projectDir) {
    this.projectDir = projectDir;
    return this;
  }

  public void unsetProjectDir() {
    this.projectDir = null;
  }

  /** Returns true if field projectDir is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectDir() {
    return this.projectDir != null;
  }

  public void setProjectDirIsSet(boolean value) {
    if (!value) {
      this.projectDir = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBuildDir() {
    return this.buildDir;
  }

  public ExternalProject setBuildDir(@org.apache.thrift.annotation.Nullable java.lang.String buildDir) {
    this.buildDir = buildDir;
    return this;
  }

  public void unsetBuildDir() {
    this.buildDir = null;
  }

  /** Returns true if field buildDir is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildDir() {
    return this.buildDir != null;
  }

  public void setBuildDirIsSet(boolean value) {
    if (!value) {
      this.buildDir = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBuildFile() {
    return this.buildFile;
  }

  public ExternalProject setBuildFile(@org.apache.thrift.annotation.Nullable java.lang.String buildFile) {
    this.buildFile = buildFile;
    return this;
  }

  public void unsetBuildFile() {
    this.buildFile = null;
  }

  /** Returns true if field buildFile is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildFile() {
    return this.buildFile != null;
  }

  public void setBuildFileIsSet(boolean value) {
    if (!value) {
      this.buildFile = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  public ExternalProject setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case QNAME:
      if (value == null) {
        unsetQname();
      } else {
        setQname((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case CHILD_PROJECTS:
      if (value == null) {
        unsetChildProjects();
      } else {
        setChildProjects((java.util.Map<java.lang.String,ExternalProject>)value);
      }
      break;

    case SOURCE_STS:
      if (value == null) {
        unsetSourceSts();
      } else {
        setSourceSts((java.util.Map<java.lang.String,ExternalSourceSet>)value);
      }
      break;

    case PROJECT_DIR:
      if (value == null) {
        unsetProjectDir();
      } else {
        setProjectDir((java.lang.String)value);
      }
      break;

    case BUILD_DIR:
      if (value == null) {
        unsetBuildDir();
      } else {
        setBuildDir((java.lang.String)value);
      }
      break;

    case BUILD_FILE:
      if (value == null) {
        unsetBuildFile();
      } else {
        setBuildFile((java.lang.String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case QNAME:
      return getQname();

    case DESCRIPTION:
      return getDescription();

    case GROUP:
      return getGroup();

    case VERSION:
      return getVersion();

    case CHILD_PROJECTS:
      return getChildProjects();

    case SOURCE_STS:
      return getSourceSts();

    case PROJECT_DIR:
      return getProjectDir();

    case BUILD_DIR:
      return getBuildDir();

    case BUILD_FILE:
      return getBuildFile();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case QNAME:
      return isSetQname();
    case DESCRIPTION:
      return isSetDescription();
    case GROUP:
      return isSetGroup();
    case VERSION:
      return isSetVersion();
    case CHILD_PROJECTS:
      return isSetChildProjects();
    case SOURCE_STS:
      return isSetSourceSts();
    case PROJECT_DIR:
      return isSetProjectDir();
    case BUILD_DIR:
      return isSetBuildDir();
    case BUILD_FILE:
      return isSetBuildFile();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ExternalProject)
      return this.equals((ExternalProject)that);
    return false;
  }

  public boolean equals(ExternalProject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_qname = true && this.isSetQname();
    boolean that_present_qname = true && that.isSetQname();
    if (this_present_qname || that_present_qname) {
      if (!(this_present_qname && that_present_qname))
        return false;
      if (!this.qname.equals(that.qname))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_childProjects = true && this.isSetChildProjects();
    boolean that_present_childProjects = true && that.isSetChildProjects();
    if (this_present_childProjects || that_present_childProjects) {
      if (!(this_present_childProjects && that_present_childProjects))
        return false;
      if (!this.childProjects.equals(that.childProjects))
        return false;
    }

    boolean this_present_sourceSts = true && this.isSetSourceSts();
    boolean that_present_sourceSts = true && that.isSetSourceSts();
    if (this_present_sourceSts || that_present_sourceSts) {
      if (!(this_present_sourceSts && that_present_sourceSts))
        return false;
      if (!this.sourceSts.equals(that.sourceSts))
        return false;
    }

    boolean this_present_projectDir = true && this.isSetProjectDir();
    boolean that_present_projectDir = true && that.isSetProjectDir();
    if (this_present_projectDir || that_present_projectDir) {
      if (!(this_present_projectDir && that_present_projectDir))
        return false;
      if (!this.projectDir.equals(that.projectDir))
        return false;
    }

    boolean this_present_buildDir = true && this.isSetBuildDir();
    boolean that_present_buildDir = true && that.isSetBuildDir();
    if (this_present_buildDir || that_present_buildDir) {
      if (!(this_present_buildDir && that_present_buildDir))
        return false;
      if (!this.buildDir.equals(that.buildDir))
        return false;
    }

    boolean this_present_buildFile = true && this.isSetBuildFile();
    boolean that_present_buildFile = true && that.isSetBuildFile();
    if (this_present_buildFile || that_present_buildFile) {
      if (!(this_present_buildFile && that_present_buildFile))
        return false;
      if (!this.buildFile.equals(that.buildFile))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetQname()) ? 131071 : 524287);
    if (isSetQname())
      hashCode = hashCode * 8191 + qname.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup()) ? 131071 : 524287);
    if (isSetGroup())
      hashCode = hashCode * 8191 + group.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetChildProjects()) ? 131071 : 524287);
    if (isSetChildProjects())
      hashCode = hashCode * 8191 + childProjects.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceSts()) ? 131071 : 524287);
    if (isSetSourceSts())
      hashCode = hashCode * 8191 + sourceSts.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectDir()) ? 131071 : 524287);
    if (isSetProjectDir())
      hashCode = hashCode * 8191 + projectDir.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuildDir()) ? 131071 : 524287);
    if (isSetBuildDir())
      hashCode = hashCode * 8191 + buildDir.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuildFile()) ? 131071 : 524287);
    if (isSetBuildFile())
      hashCode = hashCode * 8191 + buildFile.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExternalProject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQname(), other.isSetQname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qname, other.qname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescription(), other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGroup(), other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChildProjects(), other.isSetChildProjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildProjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childProjects, other.childProjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSourceSts(), other.isSetSourceSts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceSts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceSts, other.sourceSts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProjectDir(), other.isSetProjectDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectDir, other.projectDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuildDir(), other.isSetBuildDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildDir, other.buildDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuildFile(), other.isSetBuildFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildFile, other.buildFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExternalProject(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetQname()) {
      if (!first) sb.append(", ");
      sb.append("qname:");
      if (this.qname == null) {
        sb.append("null");
      } else {
        sb.append(this.qname);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetChildProjects()) {
      if (!first) sb.append(", ");
      sb.append("childProjects:");
      if (this.childProjects == null) {
        sb.append("null");
      } else {
        sb.append(this.childProjects);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sourceSts:");
    if (this.sourceSts == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceSts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectDir:");
    if (this.projectDir == null) {
      sb.append("null");
    } else {
      sb.append(this.projectDir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buildDir:");
    if (this.buildDir == null) {
      sb.append("null");
    } else {
      sb.append(this.buildDir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buildFile:");
    if (this.buildFile == null) {
      sb.append("null");
    } else {
      sb.append(this.buildFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExternalProjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ExternalProjectStandardScheme getScheme() {
      return new ExternalProjectStandardScheme();
    }
  }

  private static class ExternalProjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExternalProject> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ExternalProject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qname = iprot.readString();
              struct.setQnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHILD_PROJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.childProjects = new java.util.HashMap<java.lang.String,ExternalProject>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable ExternalProject _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = new ExternalProject();
                  _val2.read(iprot);
                  struct.childProjects.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setChildProjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SOURCE_STS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.sourceSts = new java.util.HashMap<java.lang.String,ExternalSourceSet>(2*_map4.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key5;
                @org.apache.thrift.annotation.Nullable ExternalSourceSet _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = new ExternalSourceSet();
                  _val6.read(iprot);
                  struct.sourceSts.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setSourceStsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROJECT_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectDir = iprot.readString();
              struct.setProjectDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUILD_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buildDir = iprot.readString();
              struct.setBuildDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BUILD_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buildFile = iprot.readString();
              struct.setBuildFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map8.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key9;
                @org.apache.thrift.annotation.Nullable java.lang.String _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readString();
                  struct.properties.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ExternalProject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.qname != null) {
        if (struct.isSetQname()) {
          oprot.writeFieldBegin(QNAME_FIELD_DESC);
          oprot.writeString(struct.qname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.childProjects != null) {
        if (struct.isSetChildProjects()) {
          oprot.writeFieldBegin(CHILD_PROJECTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.childProjects.size()));
            for (java.util.Map.Entry<java.lang.String, ExternalProject> _iter12 : struct.childProjects.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              _iter12.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceSts != null) {
        oprot.writeFieldBegin(SOURCE_STS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.sourceSts.size()));
          for (java.util.Map.Entry<java.lang.String, ExternalSourceSet> _iter13 : struct.sourceSts.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            _iter13.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.projectDir != null) {
        oprot.writeFieldBegin(PROJECT_DIR_FIELD_DESC);
        oprot.writeString(struct.projectDir);
        oprot.writeFieldEnd();
      }
      if (struct.buildDir != null) {
        oprot.writeFieldBegin(BUILD_DIR_FIELD_DESC);
        oprot.writeString(struct.buildDir);
        oprot.writeFieldEnd();
      }
      if (struct.buildFile != null) {
        oprot.writeFieldBegin(BUILD_FILE_FIELD_DESC);
        oprot.writeString(struct.buildFile);
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.properties.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExternalProjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ExternalProjectTupleScheme getScheme() {
      return new ExternalProjectTupleScheme();
    }
  }

  private static class ExternalProjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExternalProject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExternalProject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetQname()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetGroup()) {
        optionals.set(3);
      }
      if (struct.isSetVersion()) {
        optionals.set(4);
      }
      if (struct.isSetChildProjects()) {
        optionals.set(5);
      }
      if (struct.isSetSourceSts()) {
        optionals.set(6);
      }
      if (struct.isSetProjectDir()) {
        optionals.set(7);
      }
      if (struct.isSetBuildDir()) {
        optionals.set(8);
      }
      if (struct.isSetBuildFile()) {
        optionals.set(9);
      }
      if (struct.isSetProperties()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetQname()) {
        oprot.writeString(struct.qname);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetChildProjects()) {
        {
          oprot.writeI32(struct.childProjects.size());
          for (java.util.Map.Entry<java.lang.String, ExternalProject> _iter15 : struct.childProjects.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            _iter15.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSourceSts()) {
        {
          oprot.writeI32(struct.sourceSts.size());
          for (java.util.Map.Entry<java.lang.String, ExternalSourceSet> _iter16 : struct.sourceSts.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            _iter16.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetProjectDir()) {
        oprot.writeString(struct.projectDir);
      }
      if (struct.isSetBuildDir()) {
        oprot.writeString(struct.buildDir);
      }
      if (struct.isSetBuildFile()) {
        oprot.writeString(struct.buildFile);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter17 : struct.properties.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            oprot.writeString(_iter17.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExternalProject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.qname = iprot.readString();
        struct.setQnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(4)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.childProjects = new java.util.HashMap<java.lang.String,ExternalProject>(2*_map18.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key19;
          @org.apache.thrift.annotation.Nullable ExternalProject _val20;
          for (int _i21 = 0; _i21 < _map18.size; ++_i21)
          {
            _key19 = iprot.readString();
            _val20 = new ExternalProject();
            _val20.read(iprot);
            struct.childProjects.put(_key19, _val20);
          }
        }
        struct.setChildProjectsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map22 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.sourceSts = new java.util.HashMap<java.lang.String,ExternalSourceSet>(2*_map22.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key23;
          @org.apache.thrift.annotation.Nullable ExternalSourceSet _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = new ExternalSourceSet();
            _val24.read(iprot);
            struct.sourceSts.put(_key23, _val24);
          }
        }
        struct.setSourceStsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.projectDir = iprot.readString();
        struct.setProjectDirIsSet(true);
      }
      if (incoming.get(8)) {
        struct.buildDir = iprot.readString();
        struct.setBuildDirIsSet(true);
      }
      if (incoming.get(9)) {
        struct.buildFile = iprot.readString();
        struct.setBuildFileIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map26.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key27;
          @org.apache.thrift.annotation.Nullable java.lang.String _val28;
          for (int _i29 = 0; _i29 < _map26.size; ++_i29)
          {
            _key27 = iprot.readString();
            _val28 = iprot.readString();
            struct.properties.put(_key27, _val28);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


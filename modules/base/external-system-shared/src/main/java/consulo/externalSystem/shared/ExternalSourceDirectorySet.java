/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package consulo.externalSystem.shared;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ExternalSourceDirectorySet implements org.apache.thrift.TBase<ExternalSourceDirectorySet, ExternalSourceDirectorySet._Fields>, java.io.Serializable, Cloneable, Comparable<ExternalSourceDirectorySet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExternalSourceDirectorySet");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_DIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirs", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField OUTPUT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("outputDir", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXCLUDES_FIELD_DESC = new org.apache.thrift.protocol.TField("excludes", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField INCLUDES_FIELD_DESC = new org.apache.thrift.protocol.TField("includes", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExternalSourceDirectorySetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExternalSourceDirectorySetTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> srcDirs; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String outputDir; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> excludes; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> includes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SRC_DIRS((short)2, "srcDirs"),
    OUTPUT_DIR((short)3, "outputDir"),
    EXCLUDES((short)4, "excludes"),
    INCLUDES((short)5, "includes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SRC_DIRS
          return SRC_DIRS;
        case 3: // OUTPUT_DIR
          return OUTPUT_DIR;
        case 4: // EXCLUDES
          return EXCLUDES;
        case 5: // INCLUDES
          return INCLUDES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OUTPUT_DIR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_DIRS, new org.apache.thrift.meta_data.FieldMetaData("srcDirs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OUTPUT_DIR, new org.apache.thrift.meta_data.FieldMetaData("outputDir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCLUDES, new org.apache.thrift.meta_data.FieldMetaData("excludes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INCLUDES, new org.apache.thrift.meta_data.FieldMetaData("includes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExternalSourceDirectorySet.class, metaDataMap);
  }

  public ExternalSourceDirectorySet() {
  }

  public ExternalSourceDirectorySet(
    java.lang.String name,
    java.util.Set<java.lang.String> srcDirs,
    java.util.Set<java.lang.String> excludes,
    java.util.Set<java.lang.String> includes)
  {
    this();
    this.name = name;
    this.srcDirs = srcDirs;
    this.excludes = excludes;
    this.includes = includes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExternalSourceDirectorySet(ExternalSourceDirectorySet other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSrcDirs()) {
      java.util.Set<java.lang.String> __this__srcDirs = new java.util.HashSet<java.lang.String>(other.srcDirs);
      this.srcDirs = __this__srcDirs;
    }
    if (other.isSetOutputDir()) {
      this.outputDir = other.outputDir;
    }
    if (other.isSetExcludes()) {
      java.util.Set<java.lang.String> __this__excludes = new java.util.HashSet<java.lang.String>(other.excludes);
      this.excludes = __this__excludes;
    }
    if (other.isSetIncludes()) {
      java.util.Set<java.lang.String> __this__includes = new java.util.HashSet<java.lang.String>(other.includes);
      this.includes = __this__includes;
    }
  }

  @Override
  public ExternalSourceDirectorySet deepCopy() {
    return new ExternalSourceDirectorySet(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.srcDirs = null;
    this.outputDir = null;
    this.excludes = null;
    this.includes = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public ExternalSourceDirectorySet setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSrcDirsSize() {
    return (this.srcDirs == null) ? 0 : this.srcDirs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSrcDirsIterator() {
    return (this.srcDirs == null) ? null : this.srcDirs.iterator();
  }

  public void addToSrcDirs(java.lang.String elem) {
    if (this.srcDirs == null) {
      this.srcDirs = new java.util.HashSet<java.lang.String>();
    }
    this.srcDirs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getSrcDirs() {
    return this.srcDirs;
  }

  public ExternalSourceDirectorySet setSrcDirs(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> srcDirs) {
    this.srcDirs = srcDirs;
    return this;
  }

  public void unsetSrcDirs() {
    this.srcDirs = null;
  }

  /** Returns true if field srcDirs is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcDirs() {
    return this.srcDirs != null;
  }

  public void setSrcDirsIsSet(boolean value) {
    if (!value) {
      this.srcDirs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOutputDir() {
    return this.outputDir;
  }

  public ExternalSourceDirectorySet setOutputDir(@org.apache.thrift.annotation.Nullable java.lang.String outputDir) {
    this.outputDir = outputDir;
    return this;
  }

  public void unsetOutputDir() {
    this.outputDir = null;
  }

  /** Returns true if field outputDir is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputDir() {
    return this.outputDir != null;
  }

  public void setOutputDirIsSet(boolean value) {
    if (!value) {
      this.outputDir = null;
    }
  }

  public int getExcludesSize() {
    return (this.excludes == null) ? 0 : this.excludes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getExcludesIterator() {
    return (this.excludes == null) ? null : this.excludes.iterator();
  }

  public void addToExcludes(java.lang.String elem) {
    if (this.excludes == null) {
      this.excludes = new java.util.HashSet<java.lang.String>();
    }
    this.excludes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getExcludes() {
    return this.excludes;
  }

  public ExternalSourceDirectorySet setExcludes(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> excludes) {
    this.excludes = excludes;
    return this;
  }

  public void unsetExcludes() {
    this.excludes = null;
  }

  /** Returns true if field excludes is set (has been assigned a value) and false otherwise */
  public boolean isSetExcludes() {
    return this.excludes != null;
  }

  public void setExcludesIsSet(boolean value) {
    if (!value) {
      this.excludes = null;
    }
  }

  public int getIncludesSize() {
    return (this.includes == null) ? 0 : this.includes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getIncludesIterator() {
    return (this.includes == null) ? null : this.includes.iterator();
  }

  public void addToIncludes(java.lang.String elem) {
    if (this.includes == null) {
      this.includes = new java.util.HashSet<java.lang.String>();
    }
    this.includes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getIncludes() {
    return this.includes;
  }

  public ExternalSourceDirectorySet setIncludes(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> includes) {
    this.includes = includes;
    return this;
  }

  public void unsetIncludes() {
    this.includes = null;
  }

  /** Returns true if field includes is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludes() {
    return this.includes != null;
  }

  public void setIncludesIsSet(boolean value) {
    if (!value) {
      this.includes = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case SRC_DIRS:
      if (value == null) {
        unsetSrcDirs();
      } else {
        setSrcDirs((java.util.Set<java.lang.String>)value);
      }
      break;

    case OUTPUT_DIR:
      if (value == null) {
        unsetOutputDir();
      } else {
        setOutputDir((java.lang.String)value);
      }
      break;

    case EXCLUDES:
      if (value == null) {
        unsetExcludes();
      } else {
        setExcludes((java.util.Set<java.lang.String>)value);
      }
      break;

    case INCLUDES:
      if (value == null) {
        unsetIncludes();
      } else {
        setIncludes((java.util.Set<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SRC_DIRS:
      return getSrcDirs();

    case OUTPUT_DIR:
      return getOutputDir();

    case EXCLUDES:
      return getExcludes();

    case INCLUDES:
      return getIncludes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SRC_DIRS:
      return isSetSrcDirs();
    case OUTPUT_DIR:
      return isSetOutputDir();
    case EXCLUDES:
      return isSetExcludes();
    case INCLUDES:
      return isSetIncludes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ExternalSourceDirectorySet)
      return this.equals((ExternalSourceDirectorySet)that);
    return false;
  }

  public boolean equals(ExternalSourceDirectorySet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_srcDirs = true && this.isSetSrcDirs();
    boolean that_present_srcDirs = true && that.isSetSrcDirs();
    if (this_present_srcDirs || that_present_srcDirs) {
      if (!(this_present_srcDirs && that_present_srcDirs))
        return false;
      if (!this.srcDirs.equals(that.srcDirs))
        return false;
    }

    boolean this_present_outputDir = true && this.isSetOutputDir();
    boolean that_present_outputDir = true && that.isSetOutputDir();
    if (this_present_outputDir || that_present_outputDir) {
      if (!(this_present_outputDir && that_present_outputDir))
        return false;
      if (!this.outputDir.equals(that.outputDir))
        return false;
    }

    boolean this_present_excludes = true && this.isSetExcludes();
    boolean that_present_excludes = true && that.isSetExcludes();
    if (this_present_excludes || that_present_excludes) {
      if (!(this_present_excludes && that_present_excludes))
        return false;
      if (!this.excludes.equals(that.excludes))
        return false;
    }

    boolean this_present_includes = true && this.isSetIncludes();
    boolean that_present_includes = true && that.isSetIncludes();
    if (this_present_includes || that_present_includes) {
      if (!(this_present_includes && that_present_includes))
        return false;
      if (!this.includes.equals(that.includes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSrcDirs()) ? 131071 : 524287);
    if (isSetSrcDirs())
      hashCode = hashCode * 8191 + srcDirs.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputDir()) ? 131071 : 524287);
    if (isSetOutputDir())
      hashCode = hashCode * 8191 + outputDir.hashCode();

    hashCode = hashCode * 8191 + ((isSetExcludes()) ? 131071 : 524287);
    if (isSetExcludes())
      hashCode = hashCode * 8191 + excludes.hashCode();

    hashCode = hashCode * 8191 + ((isSetIncludes()) ? 131071 : 524287);
    if (isSetIncludes())
      hashCode = hashCode * 8191 + includes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExternalSourceDirectorySet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrcDirs(), other.isSetSrcDirs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcDirs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirs, other.srcDirs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputDir(), other.isSetOutputDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputDir, other.outputDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExcludes(), other.isSetExcludes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcludes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludes, other.excludes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIncludes(), other.isSetIncludes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includes, other.includes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExternalSourceDirectorySet(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("srcDirs:");
    if (this.srcDirs == null) {
      sb.append("null");
    } else {
      sb.append(this.srcDirs);
    }
    first = false;
    if (isSetOutputDir()) {
      if (!first) sb.append(", ");
      sb.append("outputDir:");
      if (this.outputDir == null) {
        sb.append("null");
      } else {
        sb.append(this.outputDir);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("excludes:");
    if (this.excludes == null) {
      sb.append("null");
    } else {
      sb.append(this.excludes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("includes:");
    if (this.includes == null) {
      sb.append("null");
    } else {
      sb.append(this.includes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExternalSourceDirectorySetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ExternalSourceDirectorySetStandardScheme getScheme() {
      return new ExternalSourceDirectorySetStandardScheme();
    }
  }

  private static class ExternalSourceDirectorySetStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExternalSourceDirectorySet> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ExternalSourceDirectorySet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_DIRS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set40 = iprot.readSetBegin();
                struct.srcDirs = new java.util.HashSet<java.lang.String>(2*_set40.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem41;
                for (int _i42 = 0; _i42 < _set40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.srcDirs.add(_elem41);
                }
                iprot.readSetEnd();
              }
              struct.setSrcDirsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTPUT_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputDir = iprot.readString();
              struct.setOutputDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCLUDES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set43 = iprot.readSetBegin();
                struct.excludes = new java.util.HashSet<java.lang.String>(2*_set43.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem44;
                for (int _i45 = 0; _i45 < _set43.size; ++_i45)
                {
                  _elem44 = iprot.readString();
                  struct.excludes.add(_elem44);
                }
                iprot.readSetEnd();
              }
              struct.setExcludesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INCLUDES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set46 = iprot.readSetBegin();
                struct.includes = new java.util.HashSet<java.lang.String>(2*_set46.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem47;
                for (int _i48 = 0; _i48 < _set46.size; ++_i48)
                {
                  _elem47 = iprot.readString();
                  struct.includes.add(_elem47);
                }
                iprot.readSetEnd();
              }
              struct.setIncludesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ExternalSourceDirectorySet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.srcDirs != null) {
        oprot.writeFieldBegin(SRC_DIRS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.srcDirs.size()));
          for (java.lang.String _iter49 : struct.srcDirs)
          {
            oprot.writeString(_iter49);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outputDir != null) {
        if (struct.isSetOutputDir()) {
          oprot.writeFieldBegin(OUTPUT_DIR_FIELD_DESC);
          oprot.writeString(struct.outputDir);
          oprot.writeFieldEnd();
        }
      }
      if (struct.excludes != null) {
        oprot.writeFieldBegin(EXCLUDES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.excludes.size()));
          for (java.lang.String _iter50 : struct.excludes)
          {
            oprot.writeString(_iter50);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.includes != null) {
        oprot.writeFieldBegin(INCLUDES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.includes.size()));
          for (java.lang.String _iter51 : struct.includes)
          {
            oprot.writeString(_iter51);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExternalSourceDirectorySetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ExternalSourceDirectorySetTupleScheme getScheme() {
      return new ExternalSourceDirectorySetTupleScheme();
    }
  }

  private static class ExternalSourceDirectorySetTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExternalSourceDirectorySet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExternalSourceDirectorySet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSrcDirs()) {
        optionals.set(1);
      }
      if (struct.isSetOutputDir()) {
        optionals.set(2);
      }
      if (struct.isSetExcludes()) {
        optionals.set(3);
      }
      if (struct.isSetIncludes()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSrcDirs()) {
        {
          oprot.writeI32(struct.srcDirs.size());
          for (java.lang.String _iter52 : struct.srcDirs)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetOutputDir()) {
        oprot.writeString(struct.outputDir);
      }
      if (struct.isSetExcludes()) {
        {
          oprot.writeI32(struct.excludes.size());
          for (java.lang.String _iter53 : struct.excludes)
          {
            oprot.writeString(_iter53);
          }
        }
      }
      if (struct.isSetIncludes()) {
        {
          oprot.writeI32(struct.includes.size());
          for (java.lang.String _iter54 : struct.includes)
          {
            oprot.writeString(_iter54);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExternalSourceDirectorySet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set55 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.srcDirs = new java.util.HashSet<java.lang.String>(2*_set55.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem56;
          for (int _i57 = 0; _i57 < _set55.size; ++_i57)
          {
            _elem56 = iprot.readString();
            struct.srcDirs.add(_elem56);
          }
        }
        struct.setSrcDirsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outputDir = iprot.readString();
        struct.setOutputDirIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set58 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.excludes = new java.util.HashSet<java.lang.String>(2*_set58.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem59;
          for (int _i60 = 0; _i60 < _set58.size; ++_i60)
          {
            _elem59 = iprot.readString();
            struct.excludes.add(_elem59);
          }
        }
        struct.setExcludesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set61 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.includes = new java.util.HashSet<java.lang.String>(2*_set61.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem62;
          for (int _i63 = 0; _i63 < _set61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.includes.add(_elem62);
          }
        }
        struct.setIncludesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


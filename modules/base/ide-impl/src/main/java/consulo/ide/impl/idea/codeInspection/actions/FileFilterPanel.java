/*
 * Copyright 2000-2011 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package consulo.ide.impl.idea.codeInspection.actions;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import consulo.content.scope.SearchScope;
import consulo.find.FindBundle;
import consulo.ide.impl.idea.find.impl.FindInProjectUtil;
import consulo.language.psi.scope.GlobalSearchScope;
import consulo.module.Module;
import consulo.ui.ex.awt.TitledSeparator;
import consulo.virtualFileSystem.VirtualFile;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import javax.swing.*;
import java.awt.*;
import java.util.function.Predicate;

/**
 * @author Dmitry Avdeev
 * @since 2011-10-11
 */
class FileFilterPanel {
    private JCheckBox myUseFileMask;
    private JComboBox myFileMask;
    private JPanel myPanel;

    void init() {
        FindInProjectUtil.initFileFilter(myFileMask, myUseFileMask);
    }

    @Nullable
    SearchScope getSearchScope() {
        if (!myUseFileMask.isSelected()) {
            return null;
        }
        String text = (String)myFileMask.getSelectedItem();
        if (text == null) {
            return null;
        }

        Predicate<CharSequence> patternCondition = FindInProjectUtil.createFileMaskCondition(text);
        return new GlobalSearchScope() {
            @Override
            public boolean contains(@Nonnull VirtualFile file) {
                return patternCondition.test(file.getNameSequence());
            }

            @Override
            public int compare(@Nonnull VirtualFile file1, @Nonnull VirtualFile file2) {
                return 0;
            }

            @Override
            public boolean isSearchInModuleContent(@Nonnull Module aModule) {
                return true;
            }

            @Override
            public boolean isSearchInLibraries() {
                return true;
            }
        };
    }

    JPanel getPanel() {
        return myPanel;
    }

    {
// GUI initializer generated by Consulo GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by Consulo GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myPanel = new JPanel();
        myPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        myUseFileMask = new JCheckBox();
        this.$$$loadButtonText$$$(myUseFileMask, FindBundle.message("find.filter.file.mask.checkbox"));
        myPanel.add(
            myUseFileMask,
            new GridConstraints(
                1,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                1,
                false
            )
        );
        myFileMask = new JComboBox();
        myPanel.add(
            myFileMask,
            new GridConstraints(1,
                1,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false
            )
        );
        TitledSeparator titledSeparator1 = new TitledSeparator();
        titledSeparator1.setText(FindBundle.message("find.filter.file.name.group"));
        myPanel.add(
            titledSeparator1,
            new GridConstraints(0,
                0,
                1,
                2,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false
            )
        );
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) {
                    break;
                }
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myPanel;
    }
}
